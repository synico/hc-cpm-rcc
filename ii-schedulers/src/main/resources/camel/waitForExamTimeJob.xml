<?xml version="1.0" encoding="UTF-8" ?>
<!-- 检查等待时间分析 -->
<routes xmlns="http://camel.apache.org/schema/spring">
  <route id="waitForExamTimeJob/examByAngiography" >
    <from uri="quartz2://waitForExamTimeJob/examByAngiography?cron=0+0+1+*+*+?"/>

    <setHeader headerName="job_type">
      <constant>RIS_DAILY</constant>
    </setHeader>

    <log message="start to run waitForExamTimeJob/examByAngiography"/>

    <to uri="sql:select exam_method as column1,
            pre_exam_from_type as column2,
            exam_month as column3,
            round(avg(wait_sec/86400)::numeric, 2)||'' as column4,
            count(*)||'' as column5
            from (
            select his.sheetid,ris.accession_num,his.pre_exam_schedule_submit_date,
            ris.pre_registe_date,ris.exam_date,to_char(ris.exam_date,'yyyy-MM') as exam_month,
            his.pre_exam_from_type,
            extract(EPOCH from(exam_date - pre_exam_schedule_submit_date)) as wait_sec,
            CASE
              WHEN position('CTA' in ris.exam_body_part) > 0 THEN 'CTA'
              WHEN position('MRA' in ris.exam_body_part) > 0 THEN 'MRA'
            END as exam_method
            from ris_exam ris join his_exam his on ris.sheetid=his.sheetid
            where his.pre_exam_schedule_submit_date is not null and ris.exam_date is not null
            and ris.exam_date > his.pre_exam_schedule_submit_date
            and pre_exam_from_type is not null
            ) v_exam
            where exam_method is not null
            group by exam_method,pre_exam_from_type,exam_month?dataSource=iiDS"/>

    <log message="${headers[JobName]} get ${body}" loggingLevel="DEBUG"/>

    <bean ref="aggregateDataJob" method="processData"/>

    <bean ref="aggregateDataJob" method="cleanData"/>

    <log message="${headers[JobName]} finished" loggingLevel="INFO"/>
  </route>

  <route id="waitForExamTimeJob/examByOtherMethods" >
    <from uri="quartz2://waitForExamTimeJob/examByOtherMethods?cron=0+20+1+*+*+?"/>

    <setHeader headerName="job_type">
      <constant>RIS_DAILY</constant>
    </setHeader>

    <log message="start to run waitForExamTimeJob/examByOtherMethods"/>

    <to uri="sql:select
            device_type||' '||exam_method as column1,
            pre_exam_from_type as column2,
            exam_month as column3,
            round(avg(wait_sec/86400)::numeric, 2)||'' as column4,
            count(*)||'' as column5
            from (
            select his.sheetid,ris.accession_num,his.pre_exam_schedule_date,ris.pre_registe_date,
            ris.exam_date,to_char(ris.exam_date,'yyyy-MM') as exam_month,
            his.pre_exam_from_type,
            extract(EPOCH from(exam_date - pre_exam_schedule_submit_date)) as wait_sec,
            CASE
            WHEN position('平扫' in exam_method) > 0 THEN '平扫'
            WHEN position('增强' in exam_method) > 0 THEN '增强'
            END as exam_method,
            ris.device_type
            from ris_exam ris join his_exam his on ris.sheetid=his.sheetid
            where his.pre_exam_schedule_submit_date is not null and ris.exam_date is not null
            and ris.exam_date > his.pre_exam_schedule_submit_date
            and pre_exam_from_type is not null
            ) v_exam
            where exam_method is not null
            group by device_type,exam_method,pre_exam_from_type,exam_month?dataSource=iiDS"/>

    <log message="${headers[JobName]} get ${body}" loggingLevel="DEBUG"/>

    <bean ref="aggregateDataJob" method="processData"/>

    <bean ref="aggregateDataJob" method="cleanData"/>

    <log message="${headers[JobName]} finished" loggingLevel="INFO"/>
  </route>

  <route id="waitForExamTimeJob/examByXRay" >
    <from uri="quartz2://waitForExamTimeJob/examByXRay?cron=0+40+1+*+*+?"/>

    <setHeader headerName="job_type">
      <constant>RIS_DAILY</constant>
    </setHeader>

    <log message="start to run waitForExamTimeJob/examByXRay"/>

    <to uri="sql:select exam_method as column1,
          pre_exam_from_type as column2,
          exam_month as column3,
          round(avg(wait_sec/86400)::numeric, 2)||'' as column4,
          count(*)||'' as column5
          from (
          select his.sheetid,ris.accession_num,his.pre_exam_schedule_date,ris.pre_registe_date,
          ris.exam_date,to_char(ris.exam_date,'yyyy-MM') as exam_month,
          his.pre_exam_from_type,
          extract(EPOCH from(exam_date - pre_exam_schedule_submit_date)) as wait_sec,
          ris.device_type as exam_method,
          ris.device_type
          from ris_exam ris join his_exam his on ris.sheetid=his.sheetid
          where his.pre_exam_schedule_submit_date is not null and ris.exam_date is not null
          and ris.device_type='X-RAY'
          and ris.exam_date > his.pre_exam_schedule_submit_date
          and pre_exam_from_type is not null
          ) v_exam
          where exam_method is not null
          group by device_type,exam_method,pre_exam_from_type,exam_month?dataSource=iiDS"/>

    <log message="${headers[JobName]} get ${body}" loggingLevel="DEBUG"/>

    <bean ref="aggregateDataJob" method="processData"/>

    <bean ref="aggregateDataJob" method="cleanData"/>

    <log message="${headers[JobName]} finished" loggingLevel="INFO"/>
  </route>

</routes>